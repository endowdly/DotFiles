using namespace System.Management.Automation
using namespace System.Management.Automation.Language

Set-PSReadLineOption -ViModeIndicator Script -ViModeChangeHandler {
    if ($args[0] -eq [Microsoft.PowerShell.ViMode]::Command) {
        # Set the cursor to a blinking block.
        Write-Host -NoNewLine "$([char]0x1b)[1 q"
    } else {
        # Set the cursor to a blinking line.
        Write-Host -NoNewLine "$([char]0x1b)[5 q" 
    } 
}
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward 
Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward 
Set-PSReadLineKeyHandler -Key Alt+j -Function HistorySearchForward
Set-PSReadLineKeyHandler -Key Alt+k -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key Ctrl+k -Function KillLine
Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete
Set-PSReadLineKeyHandler -Chord j -BriefDescription 'Exit Insert Mode' -ViMode Insert -ScriptBlock {
    param($key, $arg)

    $readKeyOptions = [Host.ReadKeyOptions]::IncludeKeyDown -bor [Host.ReadKeyOptions]::NoEcho
    $key = $Host.UI.RawUI.ReadKey($readKeyOptions)

    switch ($key.Character) {
        j { [Microsoft.PowerShell.PSConsoleReadLine]::Insert('j') }
        k { [Microsoft.PowerShell.PSConsoleReadLine]::ViCommandMode() }
        default { [Microsoft.PowerShell.PSConsoleReadLine]::Insert('j' + $_) } 
    }
}
Set-PSReadLineKeyHandler -Key '*,y' -BriefDescription 'global yank' -ViMode Command -Scriptblock {
    param($key, $arg)

    $line = $null
    $cursor = $null 

    [Microsoft.Powershell.PSConsoleReadLine]::GetBufferState([ref] $line, [ref] $cursor) 

    Set-Clipboard $line
} 
Set-PSReadLineKeyHandler -Key Alt+w -Function SelectShellForwardWord
Set-PSReadLineKeyHandler -Key Alt+b -Function SelectShellBackwardWord
Set-PSReadLineKeyHandler -Key Ctrl+b -BriefDescription 'Build current dotnet project' -Scriptblock {
    [Microsoft.PowerShell.PSConsoleReadLine]::RevertLine()
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert('dotnet build')
    [Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine()
} 
# This was ripped fromt he PSReadLine Sample profile and modified
Set-PSReadLineKeyHandler -Key '"', "'" ` -BriefDescription SmartInsertQuote -ScriptBlock {
    param($key, $arg)

    $quote = $key.KeyChar 
    $selectionStart = $null
    $selectionLength = $null
    $line = $null
    $cursor = $null

    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref] $line, [ref] $cursor)
    [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref] $selectionStart, [ref] $selectionLength)

    # If text is selected, just quote it and return
    if ($selectionStart -ne -1) {
        [Microsoft.PowerShell.PSConsoleReadLine]::Replace(
            $selectionStart,
            $selectionLength,
            $quote + $line.SubString($selectionStart, $selectionLength) + $quote)
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($selectionStart + $selectionLength + 2)

        return
    }

    $ast = $null
    $tokens = $null
    $parseErrors = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState(
        [ref] $ast,
        [ref] $tokens,
        [ref] $parseErrors,
        [ref] $null)

    function FindToken ($ls, $x) { 

        foreach ($token in $ls) {

            if ($x -lt $token.Extent.StartOffset) { continue }

            if ($x -lt $token.Extent.EndOffset) {
                $result = $token
                $token = $token -as [StringExpandableToken]

                if ($token) {
                    $nested = FindToken $token.NestedTokens $x

                    if ($nested) {
                        $result = $nested
                    }
                }

                return $result
            }
        }

        return
    }

    $token = FindToken $tokens $cursor

    # If we're on or inside a **quoted** string token (so not generic), we need to be smarter
    if ($token -is [StringToken] -and $token.Kind -ne [TokenKind]::Generic) {

        # If we're at the start of the string, assume we're inserting a new string
        if ($token.Extent.StartOffset -eq $cursor) {
            [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$quote$quote ")
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)

            return
        }

        # If we're at the end of the string, move over the closing quote if present
        if ($token.Extent.EndOffset -eq ($cursor + 1) -and $line[$cursor] -eq $quote) {
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)

            return
        }
    }

    if ($null -eq $token -or
        $token.Kind -eq [TokenKind]::RParen -or
        $token.Kind -eq [TokenKind]::RCurly -or
        $token.Kind -eq [TokenKind]::RBracket) {

        if ($line[0..$cursor].Where{ $_ -eq $quote }.Count % 2 -eq 1) {
            # Odd number of quotes before the cursor, insert a single quote

            [Microsoft.PowerShell.PSConsoleReadLine]::Insert($quote)
        }
        else {
            # Insert matching quotes, move cursor to be in between the quotes

            [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$quote$quote")
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
        }

        return
    }

    # If cursor is at the start of a token, enclose it in quotes
    if ($token.Extent.StartOffset -eq $cursor) {
        if ($token.Kind -eq [TokenKind]::Generic -or
            $token.Kind -eq [TokenKind]::Identifier -or 
            $token.Kind -eq [TokenKind]::Variable -or
            $token.TokenFlags.hasFlag([TokenFlags]::Keyword)) {

            $end = $token.Extent.EndOffset
            $len = $end - $cursor

            [Microsoft.PowerShell.PSConsoleReadLine]::Replace(
                $cursor,
                $len,
                $quote + $line.SubString($cursor, $len) + $quote)
            [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($end + 2)

            return
        }
    }

    # We failed to be smart, so just insert a single quote
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert($quote)
}

Set-PSReadLineKeyHandler -Key '(', '{', '[' -BriefDescription InsertPairedBraces -ScriptBlock {
    param($key, $arg)

    $closeChar =
    switch ($key.KeyChar) {
        # The breaks are not necessary
        '(' { [char] ')' }
        '{' { [char] '}' }
        '[' { [char] ']' }
        default { break }
    }

    $selectionStart = $null
    $selectionLength = $null 
    $line = $null
    $cursor = $null

    [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref] $selectionStart, [ref] $selectionLength)
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref] $line, [ref] $cursor)
    
    if ($selectionStart -ne -1) {
        # Text is selected, wrap it in brackets
        [Microsoft.PowerShell.PSConsoleReadLine]::Replace(
            $selectionStart,
            $selectionLength,
            $key.KeyChar + $line.SubString($selectionStart, $selectionLength) + $closeChar)
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($selectionStart + $selectionLength + 2)
    }
    else {
        # No text is selected, insert a pair
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$($key.KeyChar)$closeChar")
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
    }
}

Set-PSReadLineKeyHandler -Key ')', ']', '}' -BriefDescription SmartCloseBraces -ScriptBlock {
    param($key, $arg)

    $line = $null
    $cursor = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref] $line, [ref] $cursor)

    if ($line[$cursor] -eq $key.KeyChar) {
        [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
    }
    else {
        [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$($key.KeyChar)")
    }
}

Set-PSReadLineKeyHandler -Key Backspace -BriefDescription SmartBackspace -ScriptBlock {
    param($key, $arg)

    $line = $null
    $cursor = $null
    [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref] $line, [ref] $cursor)

    if ($cursor -gt 0) {
        $toMatch = $null

        if ($cursor -lt $line.Length) {

            $tomatch = 
            switch ($line[$cursor]) {
                '"' { '"' }
                "'" { "'" }
                ')' { '(' }
                ']' { '[' }
                '}' { '{' }
                default { $null }
            }
        }

        if ($toMatch -ne $null -and $line[$cursor - 1] -eq $toMatch) {
            [Microsoft.PowerShell.PSConsoleReadLine]::Delete($cursor - 1, 2)
        }
        else {
            [Microsoft.PowerShell.PSConsoleReadLine]::BackwardDeleteChar($key, $arg)
        }
    }
}
